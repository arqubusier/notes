* e-book
** e-book drm
Adobe Digital Editions installation using wine.
Working workaround:

https://appdb.winehq.org/objectManager.php?sClass=version&iId=33276

""" Begin quote

Selected Test Results

What works

Menu, authorization process, downloading files, viewing files

What does not

Installation out of the box, but has workaround

Workarounds

Install in a wine 32 prefix. Install the 4.5.0 version, since version 4.5.9 will not install giving an error "Adobe Digital Editions is already running". You laso need to install additional packages using winetricks and run a command to solve graphics glitch issue

1. Create clean wine32 prefix
WINEPREFIX="$HOME/.wine32" WINEARCH=win32 wine wineboot   

2. Install packages required for the installation
WINEPREFIX="$HOME/.wine32" winetricks corefonts dotnet40    

3. Download Adobe Digital Editions version 4.5.0 from https://filehippo.com/download...

4. Install it
WINEPREFIX="$HOME/.wine32" WINEARCH=win32 wine ADE_4.5_Installer.exe 

5. Fix graphics glitches
WINEPREFIX="$HOME/.wine32" winetricks ddr=gdi 

What was not tested

Everything else

Hardware tested

Graphics:

    GPU: Nvidia
    Driver: proprietary

Additional Comments

""" End of quote

use 'calibre' with DeDRM plugin to remove drm.

* usb

** Embedded libraries
- HID: http://www.signal11.us/oss/hidapi/

** USB

*** HID

Note: For keyboards, look at the usage table sections in both the HID Specification and the HID Usage Table document!

https://www.usb.org/sites/default/files/documents/hid1_11.pdf
https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf
*** Sniffing

https://www.totalphase.com/support/articles/200349256-USB-Background


Can be done with wireshark
https://wiki.wireshark.org/USB

libpcap (used by wireshark) does not view usb packets directly. Instead the events provided by
the (linux) kernel is displayed.

USB Request Block (URB) https://www.kernel.org/doc/html/v4.15/driver-api/usb/URB.html

The setup structure follows the USB specification for the setup header and thus is in little endian byte order. The USB data is present only in one of two events associated with an URB. If the transfer direction is from the host to the device, the data is present in the 'submit' event, otherwise the data is present in the 'completion' event. The amount of data effectively present into the event can be less than the amount of data effectively exchanged.

*** Descriptors

can be viewed with

    $ lsusb -v

or
    # lsusb -v

in linux.



** USB IN A NUTSHELL

Taken from this excellent write-up at https://www.beyondlogic.org/usbnutshell/usb1.shtml.


*** Chapter 1

Brief overview off all chapters in the usb-standard and what you *really* need to read.
In short, the most important, and useful chapters of the usb-standard when designing peripheral devices are chapters (in addition to the material in the discussed guide):

- 2, Terms and Abbreviations
- 4, Architectural Overview
- 5, USB Data Flow Model (useful information, but a bit long)
- 7, Elecrical (only device speed identification is important)
- 8, Protocol Layer (only status reporting, and handshaking)
- 9, USB Device Frame Work (the most useful chapter, read in detail)


**** Topolgy
- One master -- called *host* in usb -- per network -- called *bus* in usb.
- OTG (On-The-Go), multiple entities on a single link can negotiate over who will be the host (eg. for mobile phone)
- 127 devices per bus.
- tiered star topology, use hubs to extend network

**** Data Link and Physical
- Serial bus
- 4 wires: +5V, GND, D+, D-
- D+ and D-, differential signaling pair
- NRZI (non-Return to zero) encoding
- synch field to synchronize host and reciever
 
**** Plug And Play
- hotplug
- host loads and unloads driver automatically
- PID/VID, Product ID, Vendor ID, used by host to determine correct driver.
- Pay USB Implementor's form to get PID and VID
- or search for existing suitable PID/VID for non-commercial projects.

**** Transfer modes
- Control
- Interrupt
- Bulk
- Isochronous, reserve bandwidth (eg. audio, video aplication)

*** Chapter 2

USB uses standard colors for the wires.
| Pin Number | 	Cable Colour | Function  |
|------------+----------------------+-----------|
|          1 | red                  | VBUS (5V) |
|          2 | white                | D-        |
|          3 | green                | D+        |
|          4 | black                | ground    |
|------------+----------------------+-----------|

**** Connectors
***** USB 1.0
#+CAPTION: Type A Connector
[[./images/usb/contypea.gif]]

#+CAPTION: Type B Connector
[[./images/usb/contypeb.gif]]

***** USB 2.0
- mini b
- mini a male
- mini a female
- mini ab

***** USB 2.0 revised
- micro b
- micro a
- micro ab

***** USB 3.0
- a SuperSpeed
- b SuperSpeed
- micro b superspeed

***** USB 3.1 and USB 3.2
- type a

**** Physical

The transmitter signals according to the following tables.

Low speed:
| value | state | d+  [v] | d+ pull-down [ohm] | d- [v] | d- pull-up [ohm] |
|-------+-------+---------+--------------------+--------+------------------+
|     1 | k     | > 2.8   | 15K                | < 0.3  | 1.5K             |
|     0 | j     | < 0.3   |                    | >  2.8 |                  |

High speed:
| value | state | d+  [v] | d+ pull-down [ohm] | d- [v] | d- pull-up [ohm] |
|-------+-------+---------+--------------------+--------+------------------+
|     0 | k     | > 2.8   | 15K                | < 0.3  | 1.5K             |
|     1 | j     | < 0.3   |                    | >  2.8 |                  |

Reciever

| state | d+ d- relationship |
|-------+--------------------|
| k     | d+ - d- >= + 200mV |
| j     | d- - d+ <= + 200mV |

characteristic impedance of 90 ohms +/- 15%

**** Speed identification

A usb device annouces its prescence and speed on the bus by pulling either D+ or D- to 3.3v.
- Full Speed: d+ is pulled to 3.3v by the device.
- Low Speed:  d- is pulled to 3.3v by the device.
The pull-ups can be implemented in silicon, for instance in usb-transcievers.

Highspeed mode: more complicated...

**** Power

- 1 unit load = 100mA.
- Low-power bus functions: <= 1 unit load; 4.4v <= Vbus <= 5.25
- High-power bus functions: <= 1 unit load @ configuration, <= 5 unit loads @ operation;  4.75v <= Vbus <= 5.25.
- Self powered bus functions: <= 1 unit load at all times, the rest may come from external source.

decoupling capacitance must be between 1uF and 10uF.

**** Suspend mode
- All devices must support this mode
- Entered when there is no activity for > 3.0ms
- After suspend triggered, the device must be fully suspended within 7.0ms
- max load on the bus <= 500uA.
- This includes quiecsent current, due to required pull-downs on D- and D+ at upstream, and pullups on D- or D+ on device.
- Host sends keep-alive packets during normal operation
- Global Suspend
- Selected Suspend
 
**** Data Signalling Rate 
- High speed data is clocked at 480.00Mb/s with a data signalling tolerance of ± 500ppm.
- Full speed data is clocked at 12.000Mb/s with a data signalling tolerance of ±0.25% or 2,500ppm.
- Low speed data is clocked at 1.50Mb/s with a data signalling tolerance of ±1.5% or 15,000ppm.


*** Chapter 3

Data is sent as packets, LSBit first.
Traffic is host driven => no collision handling needed.

The first two fields are:

- Sync, 8 bit, used to syncronize clocks between transmitter and host
- PID, 8 bit, 4 bits comlpemented and repeated for error detection

PID denotes packet types, there are 4 packet types (token, data, handshake, special),
each having mulitple sub-types.

The last field is always:
- EOP, end of packet, Single Ended Zero (SE0) 2 bits, then j 1 bit

****  Token Packet
- In, host wants to read
- Out, host wants to write
- Setup, initiate control transfer
- SOF, Start of Frame, keep-alive
**** Data packet
- Data0
- Data1

Data field sizes may be at most:
- 8 bytes, low speed,
- 1023 bytes, full speed,
- 1024 bytes, high speed.

Data must be in multiples of 1 byte.

**** Handshake
- ACK
- NAK
- STALL

**** USB Functions
1 usb device address corresponds to 1-??? usb functions/configurations.

1 usb functions/configurations may have 1-?? endpoints, all usb device must support endpoint 0.

Pipes defines how an enpoint is used by the host and the device. The two types of pipes are:
- Stream pipe; uni-directional (in or out); bulk, isochronous, interrupt; application defined format, 
- Message pipe; omni-directional, but Host controlled; format defined by USB,
  
*** Chapter 4

4 types of endpoints/transfer types

**** Control Transfers
On endpoint 0 => all devices must listen.


**** Interuppt Transfers

**** Bulk Transfers
     
**** Isochronous Transfers

*** Chapter 5
* mc-kort
** säkerhetskontroll
*** TODO kolla vilken mc jag får låna till uppkörning och hitta manual till denna
*** TODO skriv checklista utan anvisningar
* emacs
** config

*** reload init.el

    M-x load-file RET init.el

** packages
*** package menu
enter using 

   M-x list-packages

- i mark package for install
- d delete
- x download and install marked packages and their dependencies.
- q exit

** completion
*** company
uses plugable backends

gtags


*** cedet
semantic completion


*** helm-gtags
**** config

(require 'setup-helm-gtags)
(require 'setup-helm)
** helm

http://tuhdo.github.io/helm-intro.html


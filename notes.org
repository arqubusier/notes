* e-book
** e-book drm
Adobe Digital Editions installation using wine.
Working workaround:

https://appdb.winehq.org/objectManager.php?sClass=version&iId=33276

""" Begin quote

Selected Test Results

What works

Menu, authorization process, downloading files, viewing files

What does not

Installation out of the box, but has workaround

Workarounds

Install in a wine 32 prefix. Install the 4.5.0 version, since version 4.5.9 will not install giving an error "Adobe Digital Editions is already running". You laso need to install additional packages using winetricks and run a command to solve graphics glitch issue

1. Create clean wine32 prefix
WINEPREFIX="$HOME/.wine32" WINEARCH=win32 wine wineboot   

2. Install packages required for the installation
WINEPREFIX="$HOME/.wine32" winetricks corefonts dotnet40    

3. Download Adobe Digital Editions version 4.5.0 from https://filehippo.com/download...

4. Install it
WINEPREFIX="$HOME/.wine32" WINEARCH=win32 wine ADE_4.5_Installer.exe 

5. Fix graphics glitches
WINEPREFIX="$HOME/.wine32" winetricks ddr=gdi 

What was not tested

Everything else

Hardware tested

Graphics:

    GPU: Nvidia
    Driver: proprietary

Additional Comments

""" End of quote

use 'calibre' with DeDRM plugin to remove drm.

* mc-kort
** säkerhetskontroll
*** TODO kolla vilken mc jag får låna till uppkörning och hitta manual till denna
*** TODO skriv checklista utan anvisningar

* Communication Technologies
** usb

*** Embedded libraries
- HID: http://www.signal11.us/oss/hidapi/

*** USB

**** HID

Note: For keyboards, look at the usage table sections in both the HID Specification and the HID Usage Table document!

https://www.usb.org/sites/default/files/documents/hid1_11.pdf
https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf
**** Sniffing

https://www.totalphase.com/support/articles/200349256-USB-Background


Can be done with wireshark
https://wiki.wireshark.org/USB

libpcap (used by wireshark) does not view usb packets directly. Instead the events provided by
the (linux) kernel is displayed.

USB Request Block (URB) https://www.kernel.org/doc/html/v4.15/driver-api/usb/URB.html

The setup structure follows the USB specification for the setup header and thus is in little endian byte order. The USB data is present only in one of two events associated with an URB. If the transfer direction is from the host to the device, the data is present in the 'submit' event, otherwise the data is present in the 'completion' event. The amount of data effectively present into the event can be less than the amount of data effectively exchanged.

**** Descriptors

can be viewed with

    $ lsusb -v

or
    # lsusb -v

in linux.



*** USB IN A NUTSHELL

Taken from this excellent write-up at https://www.beyondlogic.org/usbnutshell/usb1.shtml.


**** Chapter 1

Brief overview off all chapters in the usb-standard and what you *really* need to read.
In short, the most important, and useful chapters of the usb-standard when designing peripheral devices are chapters (in addition to the material in the discussed guide):

- 2, Terms and Abbreviations
- 4, Architectural Overview
- 5, USB Data Flow Model (useful information, but a bit long)
- 7, Elecrical (only device speed identification is important)
- 8, Protocol Layer (only status reporting, and handshaking)
- 9, USB Device Frame Work (the most useful chapter, read in detail)


***** Topolgy
- One master -- called *host* in usb -- per network -- called *bus* in usb.
- OTG (On-The-Go), multiple entities on a single link can negotiate over who will be the host (eg. for mobile phone)
- 127 devices per bus.
- tiered star topology, use hubs to extend network

***** Data Link and Physical
- Serial bus
- 4 wires: +5V, GND, D+, D-
- D+ and D-, differential signaling pair
- NRZI (non-Return to zero) encoding
- synch field to synchronize host and reciever
 
***** Plug And Play
- hotplug
- host loads and unloads driver automatically
- PID/VID, Product ID, Vendor ID, used by host to determine correct driver.
- Pay USB Implementor's form to get PID and VID
- or search for existing suitable PID/VID for non-commercial projects.

***** Transfer modes
- Control
- Interrupt
- Bulk
- Isochronous, reserve bandwidth (eg. audio, video aplication)

**** Chapter 2

USB uses standard colors for the wires.
| Pin Number | 	Cable Colour | Function  |
|------------+----------------------+-----------|
|          1 | red                  | VBUS (5V) |
|          2 | white                | D-        |
|          3 | green                | D+        |
|          4 | black                | ground    |
|------------+----------------------+-----------|

***** Connectors
****** USB 1.0
#+CAPTION: Type A Connector
[[./images/usb/contypea.gif]]

#+CAPTION: Type B Connector
[[./images/usb/contypeb.gif]]

****** USB 2.0
- mini b
- mini a male
- mini a female
- mini ab

****** USB 2.0 revised
- micro b
- micro a
- micro ab

****** USB 3.0
- a SuperSpeed
- b SuperSpeed
- micro b superspeed

****** USB 3.1 and USB 3.2
- type a

***** Physical

The transmitter signals according to the following tables.

Low speed:
| value | state | d+  [v] | d+ pull-down [ohm] | d- [v] | d- pull-up [ohm] |
|-------+-------+---------+--------------------+--------+------------------+
|     1 | k     | > 2.8   | 15K                | < 0.3  | 1.5K             |
|     0 | j     | < 0.3   |                    | >  2.8 |                  |

High speed:
| value | state | d+  [v] | d+ pull-down [ohm] | d- [v] | d- pull-up [ohm] |
|-------+-------+---------+--------------------+--------+------------------+
|     0 | k     | > 2.8   | 15K                | < 0.3  | 1.5K             |
|     1 | j     | < 0.3   |                    | >  2.8 |                  |

Reciever

| state | d+ d- relationship |
|-------+--------------------|
| k     | d+ - d- >= + 200mV |
| j     | d- - d+ <= + 200mV |

characteristic impedance of 90 ohms +/- 15%

***** Speed identification

A usb device annouces its prescence and speed on the bus by pulling either D+ or D- to 3.3v.
- Full Speed: d+ is pulled to 3.3v by the device.
- Low Speed:  d- is pulled to 3.3v by the device.
The pull-ups can be implemented in silicon, for instance in usb-transcievers.

Highspeed mode: more complicated...

***** Power

- 1 unit load = 100mA.
- Low-power bus functions: <= 1 unit load; 4.4v <= Vbus <= 5.25
- High-power bus functions: <= 1 unit load @ configuration, <= 5 unit loads @ operation;  4.75v <= Vbus <= 5.25.
- Self powered bus functions: <= 1 unit load at all times, the rest may come from external source.

decoupling capacitance must be between 1uF and 10uF.

***** Suspend mode
- All devices must support this mode
- Entered when there is no activity for > 3.0ms
- After suspend triggered, the device must be fully suspended within 7.0ms
- max load on the bus <= 500uA.
- This includes quiecsent current, due to required pull-downs on D- and D+ at upstream, and pullups on D- or D+ on device.
- Host sends keep-alive packets during normal operation
- Global Suspend
- Selected Suspend
 
***** Data Signalling Rate 
- High speed data is clocked at 480.00Mb/s with a data signalling tolerance of ± 500ppm.
- Full speed data is clocked at 12.000Mb/s with a data signalling tolerance of ±0.25% or 2,500ppm.
- Low speed data is clocked at 1.50Mb/s with a data signalling tolerance of ±1.5% or 15,000ppm.


**** Chapter 3

Data is sent as packets, LSBit first.
Traffic is host driven => no collision handling needed.

The first two fields are:

- Sync, 8 bit, used to syncronize clocks between transmitter and host
- PID, 8 bit, 4 bits comlpemented and repeated for error detection

PID denotes packet types, there are 4 packet types (token, data, handshake, special),
each having mulitple sub-types.

The last field is always:
- EOP, end of packet, Single Ended Zero (SE0) 2 bits, then j 1 bit

*****  Token Packet
- In, host wants to read
- Out, host wants to write
- Setup, initiate control transfer
- SOF, Start of Frame, keep-alive
***** Data packet
- Data0
- Data1

Data field sizes may be at most:
- 8 bytes, low speed,
- 1023 bytes, full speed,
- 1024 bytes, high speed.

Data must be in multiples of 1 byte.

***** Handshake
- ACK
- NAK
- STALL

***** USB Functions
1 usb device address corresponds to 1-??? usb functions/configurations.

1 usb functions/configurations may have 1-?? endpoints, all usb device must support endpoint 0.

Pipes defines how an enpoint is used by the host and the device. The two types of pipes are:
- Stream pipe; uni-directional (in or out); bulk, isochronous, interrupt; application defined format, 
- Message pipe; omni-directional, but Host controlled; format defined by USB,
  
**** Chapter 4

4 types of endpoints/transfer types

***** Control Transfers
On endpoint 0 => all devices must listen.


***** Interuppt Transfers

***** Bulk Transfers
      
***** Isochronous Transfers

*** Chapter 5
* mc-kort
** sÃ¤kerhetskontroll
*** TODO kolla vilken mc jag fÃ¥r lÃ¥na till uppkÃ¶rning och hitta manual till denna
*** TODO skriv checklista utan anvisningar
* Network

*** MTU
MTU Stands for Maximum Transport Unit.
It is the largest allowed size of a protocol data unit (PDU) at layer 3 that can be communicated in a single network layer transaction for a particular link.

*** Path MTU
The smallest MTU in a path between to hosts.
  

*** Physical

*** Data Link

*** Network
**** IPv4

**** IPv6
Fragmentation may only be performed by the source node.
It is therefore strongly recomended to use MTU-discovery to establish the path MTU to avoid packet drop due to too large packets.
*** Transport
**** TCP
Complex, Connection-oriented and reliable. Uses handshakes to establish connections and for confirming that messages have arrived.

Reliable Byte Stream protocol: bytes arrive in the same order as sent.
for a single transmission: loop read()/recv() may return less th 0; 

FAQ 

**** UDP
Simple, connectionless and unreliable.

***** Unconnected Socket
'sendto' and 'recvfrom' must be used on an unconnected socket due to the need of specifying the address of the destination.

***** Connected Socket

     int connect(int sockfd, const struct sockaddr *addr,
                   socklen_t addrlen)

Can be called on UDP as well as TCP.
For UDP this does not have the effect of establishing a connection.
Instead it specifies that a UDP socket shall be used only with the peer addressed by 'addr',
AND that error detection features of UDP are turned on.
In addition, since the address of the peer is specified by the connect, 'write' or 'send' can be used for output,
and 'read', 'recvmesg', or 'recvmsg' can be used for input.
Also, when calling 'sendto' the destination address must be set to NULL.

The error detection features of UDP include a checksum that can detect errors in the payload.


*** OS API
**** Posix Sockets
***** TCP Address already in use

If the local end initiates close, the kernel may keep the
socket  while waiting for timeout in the 'TIME_WAIT' tcp state

https://hea-www.harvard.edu/~fine/Tech/addrinuse.html


**** TAPS
https://tools.ietf.org/pdf/draft-ietf-taps-arch-04.pdf

*** System Tools

**** List Network Interfaces

- ifconfig (linux, solaris)
- ipadm (solaris)
- ip (linux, solaris)

**** Inspect Packets
- snoop (solaris)
- wireshark (linux, solaris)


*** Troubleshooting

**** connect: Connection Refused

1. Who is the server, who is the client?
2. Are there any sockets for wich a server is listening on the expected port and address?
Check this with netstat ON THE SAME MACHINE AS THE SEREVER.
Solaris:

  netstat -a -P <PROTOCOL> | grep LISTEN | grep <PORT>

Linux:

  netstat -l -P <PROTOCOL> | grep <PORT>

3. Is the port blocked by a firewall
Check with tcpdump.


** CAN - Controller Area Network

Network standard for physical and data-link layer

Standards for the physical layer:

Standards for the data-link layer:


*** Physical

CAN is a serial, differential voltage, two wire bus protocol.
The two wires are called CAN-low and CAN-high.
CAN-high has logical level 1 and CAN-low may be 0 or 1. 
The wires may be used to connect a number of nodes together.
In CAN the word for a node is a *station*.


Can uses the terms *recessive* and *dominant* bits.
These have logical levels 1 and 0 respectively.
The terms are so named because if one or more stations drives CAN-low to 0 while one or more stations keeps CAN-low at 1,
then the wire will have the logical 0.
Thus the dominant bit 'dominates' over the recessive bits.

**** Frame Formats

Message frames are sent serially, one bit at a time by controlling CAN-LO

From wikipedia:


Standard format
| Field name                               | Length (bits) | Purpose                                                                                                    |
|------------------------------------------+---------------+------------------------------------------------------------------------------------------------------------|
| Start-of-frame                           |             1 | Denotes the start of frame transmission                                                                    |
| Identifier (green)                       |            11 | A (unique) identifier which also represents the message priority                                           |
| Remote transmission request (RTR) (blue) |             1 | Must be dominant (0) for data frames and recessive (1) for remote request frames (see Remote Frame, below) |
| Identifier extension bit (IDE)           |             1 | Must be dominant (0) for base frame format with 11-bit identifiers                                         |
| Reserved bit (r0)                        |             1 | Reserved bit. Must be dominant (0), but accepted as either dominant or recessive.                          |
| Data length code (DLC) (yellow)          |             4 | Number of bytes of data (0-8 bytes)[a]                                                                     |
| Data field (red)                         |          0-64 | (0-8 bytes) Data to be transmitted (length in bytes dictated by DLC field)                                 |
| CRC                                      |            15 | Cyclic redundancy check                                                                                    |
| CRC delimiter                            |             1 | Must be recessive (1)                                                                                      |
| ACK slot                                 |             1 | Transmitter sends recessive (1) and any receiver can assert a dominant (0)                                 |
| ACK delimiter                            |             1 | Must be recessive (1)                                                                                      |
| End-of-frame (EOF)                       |             7 | Must be recessive (1)                                                                                      |


Extended Format
| Field Name                               | Length (bits) | Purpose                                                                                                    |
|------------------------------------------+---------------+------------------------------------------------------------------------------------------------------------|
| Start-of-frame                           |             1 | Denotes the start of frame transmission                                                                    |
| Identifier A (green)                     |            11 | First part of the (unique) identifier which also represents the message priority                           |
| Substitute remote request (SRR)          |             1 | Must be recessive (1)                                                                                      |
| Identifier extension bit (IDE)           |             1 | Must be recessive (1) for extended frame format with 29-bit identifiers                                    |
| Identifier B (green)                     |            18 | Second part of the (unique) identifier which also represents the message priority                          |
| Remote transmission request (RTR) (blue) |             1 | Must be dominant (0) for data frames and recessive (1) for remote request frames (see Remote Frame, below) |
| Reserved bits (r1, r0)                   |             2 | Reserved bits which must be set dominant (0), but accepted as either dominant or recessive                 |
| Data length code (DLC) (yellow)          |             4 | Number of bytes of data (0-8 bytes)[a]                                                                     |
| Data field (red)                         |          0-64 | (0-8 bytes) Data to be transmitted (length dictated by DLC field)                                          |
| CRC                                      |            15 | Cyclic redundancy check                                                                                    |
| CRC delimiter                            |             1 | Must be recessive (1)                                                                                      |
| ACK slot                                 |             1 | Transmitter sends recessive (1) and any receiver can assert a dominant (0)                                 |
| ACK delimiter                            |             1 | Must be recessive (1)                                                                                      |
| End-of-frame (EOF)                       |             7 | Must be recessive (1)                                                                                      |


Remote frame:

Like a data frame but RTR is set to recessive and the data field is empty.

**** Bus Control

CAN has no central bus master.
Instead the leading identifier determines the frames determine priority;
the message with the highest priority gets bus access regardless of the sender.

To avoid bus conflicts, CAN uses non-destructive bus arbitration.
Each station is able to listen and transmit at the same time, however
if the bus is in use by one station, others may not interrupt.
As long as the bus is not in use, a station may try to send a frame at any time.
If two or more frames try to send at almost the same time, they will simultaneously drive the bus and compare the bus level with the id of their own message.
As soon as one station sees a dominant bit on the bus in the same position as a recessive bit in its id field, that station will back of and revert to listening on the bus.
In the end there is exactly one station that will continue to send its message.
This method can be contrasted with CSMA/CD, where a bus conflict forces ALL nodes to abort sending.  


**** Synchronization and Bit coding

In CAN, there is no dedicated bus clock.
Instead CAN requires that all stations have the ability to compensate for different error sources such as clock period differences and phase drift.
Synchronization occurs at the beginning of a frame at the first transition from dominant to recessive.
Resynchronization then occurs at every recessive to dominant transition.

CAN uses non-return to zero encoding.
But to ensure that resynchronization occurs sufficiently often, bit stuffing is used.



*** CANopen

**** TERMS

- Node ID: Identies a specific node in the network, range 0-127
- OD index + subindex: Idenditfies a specific variable in the OD.
- SDO: service data object, one or more variables/constants in the OD used in the SDO-protocol of CAN-open
- PDO: process data object, one or more variables/constants in the OD used in the PDO-protocol of CAN-open
- COB ID/CAN ID: The message id used in CAN.
  In CANopen this corresponds to one communcition channnel from one node to one or more other nodes.
  Each SDO requires two COB IDS: client->server and server->client.

**** OD

Object Dictionary.

The purpose of the Object Dictionary (OD) is to describe all data fields for a node that other nodes can interact with.
As such, each node on the bus has its own OD.
The OD is structured as a list of entries, and each entry is identified by a 16-bit index, and a 8-bit sub-index.

The entries 0001h-0FFFh (4094) of the OD are used to define the data types a node supports.

**** SDO

Service data object.

Allows for master/slave communication, where one node, the master, has one communication channel to every other node in the network.
By default, only the master node is allowed to use these communication channels.
On such a channel the master may issue read or write requests.
The slave on the end of the channel must respond, in the case of a read request, or conform in the case of a write request.
The slave *serves* the master, hence the name *Service* Data Object.

Example usage of this feature include diagnostics, and configuration.

SDO also allows fragmentation, this is called "segmented transfer"

FORMAT:


| SDO TYPE | CAN ID        | xxx | DATA0                                                | DATA1-DATA3                      | DATA4-DATA7  |
|----------+---------------+-----+------------------------------------------------------+----------------------------------+--------------|
| Request  | 600h + NODEID |     | Specifier: read/write/abort, segment?, blocktransfer | multiplexor: OD index + subindex | actual data? |
|----------+---------------+-----+------------------------------------------------------+----------------------------------+--------------|
| transmit | 580h + NODEID |     | Specifier: read/write/abort, segment?, blocktransfer | multiplexor: OD index + subindex | actual data  |
|----------+---------------+-----+------------------------------------------------------+----------------------------------+--------------|
| Fragment | 580h + NODEID |     | Specifier: read/write/abort, segment, blocktransfer  | actual data                      | actual data  |


**** PDO

Process Data Object.

With PDOs OD entries can be grouped together to form messages, and these messages can be sent point-to-point between nodes.

From the perspective of a single node there are two types of PDOs: transmit PDOs (TPDO)s and receive PDOs (RPDO)s.
Each PDO used by a node (both TPDOs and RPDOs) have associated configuration parameters in its OD.
For TPDOs these include TPDO communication parameters and PDO mapping parameters.
For RPDOs these include RPDO communication parameters and PDO mapping parameters.

***** TPDO communication parameters
index 1800h - 19FFh
| subindex | name      |
|----------+-----------|
|        0 | # entries |
|----------+-----------|
|        1 | COB ID    |
|----------+-----------|
|      etc |           |


***** RPDO communication parameters
index 1400h - 15FFh

| subindex | name      |
|----------+-----------|
|        0 | # entries |
|----------+-----------|
|        1 | COB ID    |
|----------+-----------|
|      etc |           |

***** PDO Mapping Paramters

index 1600h-17FFh for RPDOs
index 1A00h to 1BFFh for TPDOs

The network may be configured such that any TPDO may captured by one or more other node(s).
To link a PDO #n, from node a to node b, the COB id in the respective communication parameters must be set correctly.
On node a, the COB ID at subindex 1 for TPDO at index 1800h+#n must be set the the same value as the COB ID at subindex 1 for RPDO at index 1400h+#n on node b.

***** Pre-configured connection set

By default the COB IDs are assigned in such a way that no linking exists.
Thus only the NMT master will be able to send and receive PDOs.
The collective name for all default values is the *pre-configured connection set*.
For example:

TPDO1 from node n is assigned 180h+n.  
TPDO2 from node n is assigned 280h+n.  
RPDO1 from node n is assigned 200h+n.  
RPDO2 from node n is assigned 300h+n.

These values are the same on all nodes.

**** NMT

Heart beat.

Node guarding.


*** socketCAN
https://elinux.org/CAN_Bus
https://www.kernel.org/doc/Documentation/networking/can.txt

SocketCAN is the official can interface of the linux kernel.
The purpose is to provide a single user-level interface with
"enough" high-level features, indepentent of the can hardware.
Instead of writing a new hardware abstraction layer, like that
of tty, sound, etc., parts of the network stack, including
the user-facing api -- sockets -- are reused.

  

**** configure physical can interface

This is done with the 'iproute2' suite, just like with other networking
interfaces in linux.

Activate device 'can0' with bitrate 500000 
   
   $ ip link set can0 up type can bitrate 500000

Setting the bitrate correctly is important to avoid errors.
Bit timing parameters are calculated automatically, but can also be set
manually.

- Display CAN device details and statistics:

    $ ip -details -statistics link show can0
    2: can0: <NOARP,UP,LOWER_UP,ECHO> mtu 16 qdisc pfifo_fast state UP qlen 10
      link/can
      can <TRIPLE-SAMPLING> state ERROR-ACTIVE restart-ms 100
      bitrate 125000 sample_point 0.875
      tq 125 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1
      sja1000: tseg1 1..16 tseg2 1..8 sjw 1..4 brp 1..64 brp-inc 1
      clock 8000000
      re-started bus-errors arbit-lost error-warn error-pass bus-off
      41         17457      0          41         42         41
      RX: bytes  packets  errors  dropped overrun mcast
      140859     17608    17457   0       0       0
      TX: bytes  packets  errors  dropped carrier collsns
      861        112      0       41      0       0


**** can-utils
https://github.com/linux-can/can-utils

reading from interface can0:

  $ candump can0

reading from interface can0 with filter 0x750 and mask 0xFFF:

  $ candump can0,750:FFF

Writing {0x11,0x22,0x33,...,0x88} with can-id 0x123 to interface can0:

  $ cansend can0 123#11.22.33.44.55.66.77.88 

** PCI

Peripheral Component Interface (PCI),
is a network standard for connecting external devices to the cpu.

This network may contain at most 256 buses, each having at most 32 devices,
with each device having at most 8 functions.
In practice, the amount of devices per bus is typically lower than 32,
due to limitations in the physical protocol.

There are two classes of devices in PCI:

1. Bridge, a device that connects PCI-buses.
2. non-Bridge.

*** BUS ACCESS

PCI buses allow for multiple masters.
In fact, the standard allows multiple functions on the same device to be bus masters.
Bus contention is resolved by a bus arbiter.
Each device has a pair of wires #REQ and #GNT connected to the bus arbiter.
The former is used to request bus access,
and the latter, asserted by the bus arbiter,
signals that the corresponding device is granted access.
The standard states that the bus arbiter must use a fair bus scheduling algorithm.

*** TRANSACTION MODELS

There are three types of transaction models in PCI.

The first is programmed I/O.
If data is to be transferred from a device to primary memory in this model,
the cpu must in turn request each word from a device,
copy each word from the pci network to a register,
and then write each word to memory.
The same method, but in reverse, is used to transfer data from primary memory to a device.

The second is direct memory access (DMA).
In this model, a device may have a programmable controller, called a DMA engine,
that is capabable of sending sequences of data over the pci-network.
In this model, the cpu can program a device to send a specified amount of data,
to a specified address in primary memory.
When all data has been transfered, the device can notify the cpu with an interrupt.

The third model is peer-to-peer, where two devices can communicate directly over the pci network,
without oversight from the cpu.

*** PCI MEMORY MAP

On x86 platforms, memory-mapped I/O is used to interface with PCI.
To conserve memory addresses,
PCI uses a dataport and an address port to read and write to a PCI device.
The CPU first writes to the address port, targeting a bus, device and function number and a word offset.
The CPU then reads or writes the data to the dataport to initiate the actual transaction.

*** Physical Protocol

Buses are parallell.
Reflected Wave signaling.

** PCI-X

Introduces several improvements, but still suffer from limitations inherent in parallel buses.


** PCI Express

*** Protocol

Layered

Packet-based

Split-transaction model

posted

non-posted

*** DMA

Multiple Masters: Devices can initiate transactions.
For memory accesses transactions initiated by a device, it can be
said that the device has a DMA engine.

To support memory accesses initiated by a device, the computer system
may employ an I/O Memory Management Unit (IOMMU). In such cases,
the device will use "Bus addresses", while a program running on the
processor might use other types of addresses such as virtual addresses
to point out the same memory. This must be considered when using
DMA buffers accessed by both a device and driver.


*** Layers

**** Transaction Layer

Message types

virtual channels

**** Data Link layer 

ack/nak

**** Physical Layer

PCIe has a completely different physical layer compared to PCI.
An important difference is that PCIe has serial, point-to-point connections instead of parallell buses.
This is because the latter places higher constraints on connection transfer speeds compared to the former.

A connection between PCIe devices is called a link.
Each link may constist of multiple lanes;
the standard allows for 1, 2, 4, 16 or 32 lanes per link designated as:
1x, 2x, 4x, 16x, or 32x.
Each link is a dual-simplex, or full-duplex connection,
which means that data can be sent both ways simultaneously.

The links use differenctial signaling in both directions.
This means that every link has four wires: two in both directions.

There is no common "bus" clock in PCIe, unlike PCI.
Instead, each link is clocked separately.
This is done by embedding clock information in the datastream on the sending side,
and recovering it on the receiver side.
To acheive this 8b/10b (PCIe gen 1, 2) or 128/130b (PCE gen 3) encoding,
in combination with phased locked loops (PLLS) are used.

*** PCIe configuration space
In most cases, a processor can not directly send PCIe transactions
to request configuration space data. This is done by the root complex
on behalf of the processor.

A processor initiates the transfers, through memory mapped I/O.
However the memory mapping is direct, unlike in PCI where data ports are used;
for each PCIe function, 4KiB of configuration space memory is mapped into
the processors memory. This is done by configuration software (read BIOS).

*** Base Address Registers



    
* LINUX KERNEL DEVELOPMENT
** Functions
devm_kzalloc
pci_set_drvdata
pci_enable_device save configured irq of pci device to pdev


pci_request_regions
pci_iomap

pci_set_master

pci_request_irq

iowrite32

setup_timer

le32_to_cpu endian conversion

*** printk
https://en.wikipedia.org/wiki/Printk

printk(KERN_DEBUG "Debug message shown!\n");

Different Loglevels, along with their numerical values, are shown here:
0 	KERN_EMERG 	Emergency condition, system is probably dead
1 	KERN_ALERT 	Some problem has occurred, immediate attention is needed
2 	KERN_CRIT 	A critical condition
3 	KERN_ERR 	An error has occurred
4 	KERN_WARNING 	A warning
5 	KERN_NOTICE 	Normal message to take note of
6 	KERN_INFO 	Some information
7 	KERN_DEBUG 	Debug information related to the program 

Current loglevel:
/proc/sys/kernel/printk
(format: console level, default message level, minimum console level, default console level)

printk() can be called from anywhere in the Kernel at any time. It can be called from interrupt
or process context. It can be called while a lock is held.
It can be called simultaneously on multiple processors,
yet it does not require the caller to hold a lock. 

View printk messages using: dmesg or /var/log/kern.log

** KBUILD
Kernel build system.
A combination of text config files, makefiles, help programs, c defines.
Enables conditional compilation.

Configuration Symbols: variable that controls conditional compiation.
There are two kinds of symbols:
- Binary: true, false
- Tristate: true, false, module


*** Configuration Symbols
Binary is used to enable/disable features that are intrisic to the kernel.
Tristate is used for functions that can be disabled, built into the kernel,
or built as an external module.

*** Configuration Files
Kconfig files are text files used to define configuration symbols.
These are read by 'scripts/kconfig/menuconfig' a c program that provides a tui for
setting the configuration symbols. The output is .config files
that hold the chosen values for the configuration symbols.

The prefix "CONFIG_" is added to all configuration symbols in the .config files.

The .config files are read by 'scripts/kconfig/conf', which use symbols in
the former to create corresponding c defines in the file
'include/generated/autoconf.h'. This file is included automatically by kbuild
for every translation unit compilation.

kbuild has two variables that keep track of the object files to build:
- obj-y, for objects to build into the kernel
- obj-m, for objects to be built as modules.

These are constructed based on the .config files and 'include/generated/autoconf.h'
Thus enabling conditional selection of which source files to build.

Conditional compilation inside the source file is enabled by using
preprocessor directives, such as #ifdef, using the macros from
'include/generated/autoconf.h'

*** VARIABLES

M=dir

Build external module in directory 'dir'.

* OS
* DRIVERS

** SOLARIS

The text in the following sections discusses device drivers.
However Most of the information also applies to kernel modules,
which are units of executable code that can be loaded into and subsequently executed by,
the kernel.
In fact, device drivers are a subset of kernel modules.

*** RELEVANT MAN PAGES

Driver/Kernel module information:
- Section 9E, intro(9E) -- Entry points for drivers. DDI/DDK.
- Section 9F, intro(9F) -- Kernel functions that may be called from drivers.
- Section 9P            -- Reference pages for driver properties.
- Section 9S, intro(9S) -- Reference pages for data structures.

Kernel and System information:
- kernel(1M)
- system(4)
- devfs(7FS)
- boot(1M)

System commands:
- prtconf(1M)
- prtpicl(1M)
- devfsadmd(1M)
- add_drv(1M)
- update_drv(1M)
- modload(1M)
- modunload(1M)
- modinfo(1M)

*** DRIVER INTERFACE

A driver can interact with:

User Level

Category method

User applications system calls
System commands user requests

Kernel Level

Category method

Kernel boot code system initialization
Bus driver eg. pci driver eg. bus reset
Hardware controller interrupts

*** FILESYSTEM INTERFACES

devfs manages the filetree under /devices.
This filetree shows the currently attached device instances.
It is updated automatically as drivers are attached.
Creation of files and directories under /devices is exclusively mangaed by devfs.

The device tree which resides under /dev is also show information about devices.
However this follows the UNIX standard,
as opposed to devfs which is a Solaris specific standard.
Many of the files under /dev are actually symlinks to files in /devices.

*** DEVICE PROPERTIES
A device property is a name value pair, related to a device.
They may be used by the rest of the system to get information
about devices (and interact with devices???).

Use:

  $ prtconf -v

To view device properties.

Drivers can use ddi_prop_* functions to manage device properties.

*** DEVICE NUMBERS

A device number is a pair of numbers, namely a major number AND a minor number.
This pair uniquely identifies a driver and a device instance.

The major number is unique for every driver,
and this number isautomatically assigned when a driver is installed.
The current major numbers can be read from /etc/name_to_major.

The minor number is assigned in the driver.

*** MULTITHREADING

**** Storage

- Kernel Thread local storage (automatic), only used by a single thread.
- Global Static, may be used by threads in the driver.
- Kernel heap, may be used by threads in the kernel (and threads outside of the driver?). 

**** Mutexes

**** Semaphores

**** Read/write locks
Mostly N/A for drivers.

**** Condition Variables

*** Task Queues
A mechanism for deffering work to a more conveanient time.

A task lists is a FIFO queue with functions to execute.
Each task list may have a number of threads that can execute functions in it.

A driver may, among other things, create, destroy, and queue tasts to tasklists.

*** CHARACTER DEVICE FILES

*** BLOCK DEVICE FILES

*** INSTALLING DRIVERS

Use add_drv

If there already exists a driver with the same device binding,
the new driver will not attach correctly unless the computer is restarted.

However an existing driver can be replaced with a newer version.
This is can be done by unloading the old driver and loading the new driver manually.
For this to work the name of the driver (and maybe some variables???) must not differ.
The reason this works, is because the new driver is not INSTALLED;
the executable for the driver is merely replaced.

*** MANIPULATING DRIVERS

*** IDENTIFYING DRIVERS

use

  prtconf -D <devicefile>

where <devicefile> is a file from devfs, to see which driver manages the corresponding device.

*** MISC

**** DDI_INTR_ALLOC_STRICT
Causes error when used on solaris 10 x86 as argument to
ddi_intr_alloc.
  
*** DEBUGGING
**** savecore bad magic number


Applies to:
Solaris Operating System - Version 10 6/06 U2 to 10 1/13 U11 [Release 10.0]
Solaris Operating System - Version 11.1 to 11.2 [Release 11.0]
Information in this document applies to any platform.
Symptoms

If the issue described in this document is encountered, executing savecore may return a message similar to the following

# savecore -vd -D .
savecore: bad magic number cccccccc, savecore: Failed to read valid dump header from dump file /dev/zvol/dsk/rpool/dump
Changes

Re-sizing /dev/zvol/dsk/rpool/dump using 'zfs set volsize=newsize rpool/dump'
Cause

Due to Bug 17190470, this issue can occur in the following releases:

SPARC Platform:

    Solaris 10 without patch 150400-20
    Solaris 11.2 without SRU 8.4


x86 Platform:

    Solaris 10 without patch 150401-20
    Solaris 11.2 without SRU 8.4

 
Solution

This issue is addressed in the following releases:

SPARC Platform

    Solaris 10 with patch 150400-20 or later
    Solaris 11.2 with SRU 8.4 or later


x86 Platform

    Solaris 10 with patch 150401-20 or later
    Solaris 11.2 with SRU 8.4 or later


If the patch or SRU can not be applied right away you can workaround the issue by running 'zfs set volsize=newsize rpool/dump' twice.  The run the savecore command.  eg:

 
# zfs set volsize=10g rpool/dump
# zfs set volsize=10g rpool/dump

**** Postmortem Debugging

     # savecore
     
     # savecore -vf  <path-to-core>

# savecore -vd -D .

     # cd <path-to-decompressed-core>
     
     # ls
bounds unix.0vmcore.0

# mdb 0

> ::status debugging crash dump vmcore.0 (64-bit)from unknown
.
.
.

***** Backtrace
For current thread (at time of crash)
      > $c
For other threads

    > <stack-address>$c

or

    > <thread_address>::findstack

Dissaseble instruction at <function_name>+<offset> and <n>
before and after lines
    > <function_name>+<offset>::dis -n <n>

** Linux

*** kmod

A set of tools to load, unload, ..etc linux kernel drivers
The tools include:
kmod
lsmod
depmod
insmod
lsmod
modinfo
modprobe
rmmod

*** kABI
http://blog.fpmurphy.com/2011/07/centos-5-6-ar8131-nic-driver.html?output=pdf&l=lv
https://wiki.centos.org/HowTos/BuildingKernelModules#head-b86b6eec08d5719cf1838929f26a64af88e2b7f0
https://www.elrepo.org/tiki/FAQ

Kernel Application Binary Interface. The ABI used by the kernel.
Device drivers must be compatible with the kABI used by a kernel to work.
There is no official stable ABI for linux. As such, for official support,
device drivers must be compiled for each kernel version it is to be used with.

*** kABI tracking
However redhat and centos have whitelists and blacklist for specific symbols used in
(their) specific kernel versions.
These can be used to determine compatibility between kernel modules and kernel versions.

*** udev
udevd

/etc/udev/rules.d

*** MISC
modules-load.d -- Configure kernel modules to load at boot
   
* Storage Solaris
** Misc

Identify and format disks.

   $ format

* ZFS

3 important abstractions:

- vdev: Virtual device, abstracted hardware storage device.
- pool: Storage area, is linked to a number of vdevs.
- dataset: Structured data within a pool, eg. filesystem.

** zpool

Manage pools

*** find pools

    $ zpool import

*** import a pool

    $ zpool import <pool>

*** export pool

Exports the pool from the system.
Makes it possible to import into another system.

    $ zpool export <pool>

** zfs

Manage datasets.

*** list all datasets

    $ zfs list

*** Mount an unmounted dataset to a temporary location

Only works when filesystem configured as non-legacy.

    $ zfs mount -o mountpoint=<tmp-mountpoint> <filesystem>

*** unmount

    $ zfs umount




* RPM
** list files in package
Use following syntax to list the files for already INSTALLED package:

  $ rpm -ql package-name

Use following syntax to list the files for RPM package:

  $ rpm -qlp package.rpm 
* Dtrace

** display probes

   # dtrace -l

** time a function

This example shows how to time a syscall.

  # dtrace -n 'syscall::write:entry { self->s = timestamp; } \
               syscall::write:return /self->s/ { @["ns"] = quantize(timestamp - self->s); self->s = 0; }'
* X
** Keyboard
   $ setxkbmap -model pc104 -layout cz,us -variant ,dvorak -option grp:alt_shift_toggle
* Licenses
** Apache 2.0

There does not appear to be any requirment that a licensee make the the source of a derivative work be made available.
There is no requirement that derivative works be licensed under the same license: "license to ... sublicense"
from the chapter "Grant of Copyright License".
*** Grant of Patent License

I interpret this as: if a contributor makes a contribution that falls under a patent that the contributor owns,
then a licensee of the work gets a license to make, have made, use, offer to sell, sell, import, and otherwise transfer the WORK.
i.e. the patent license is limited to the work.

** Mozilla Public License 2.0

Requires that the licensee make the source code form of the covered software be made available.

May be distributed as a larger work, provided that covered software has the same license.
"Larger work" is work that combines covered software with other material, in *separate* files.

May be distributed under a different license if compatible.
* Development Tools
** Compilers
*** GCC
https://gcc.gnu.org/onlinedocs/gccint.pdf
**** Show defined macros
$ gcc -xc -E -dM - </dev/null
$ gcc -xc++ -E -dM - </dev/null
för C respektive C++.

*** certified compilers
https://www.iar.com/support/resources/articles/how-to-validate-a-build-toolchain/
** EMACS
*** config

**** reload init.el

     M-x load-file RET init.el

*** packages
**** package menu
enter using 

   M-x list-packages

- i mark package for install
- d delete
- x download and install marked packages and their dependencies.
- q exit

*** completion
**** company
uses plugable backends

gtags


**** cedet
semantic completion


**** helm-gtags
***** config

(require 'setup-helm-gtags)
(require 'setup-helm)
*** helm

http://tuhdo.github.io/helm-intro.html


*** CTAGS

Run

  ctags -e -R -F TAGS .

in the projectdir. '-e' is to make tags file compatible with emacs.

*** TRAMP

Emacs module for opening files and, in conjuction with certain modes, start processes on a remote target.

To specify a remote file, TRAMP uses a special syntax: '/<protocol>:<host>:<path-to-file>'.

*** gdb

On new versions must be run with:

   M-x gdb -i=mi

Can be used with TRAMP to debug remote programs
specify the program to be debug using TRAMP path syntax:  '/<protocol>:<host>:<path-to-file>'.

**** TROUBLESHOOTING

TRAMP may not like the PS1 defined on the remote.
A quickfix for this:

  [[ $TERM == "dumb" ]] && PS1='$ ' && return
** Debugging and analysis
*** sourcetrail
https://www.sourcetrail.com/blog/open_source/** Code analysis
*** Gnu Global

First, create tag file with gtags. Example:

    $ find . -type f -print >/tmp/list     # make a file set
    $ vi /tmp/list                         # customize the file set
    $ gtags -f /tmp/list

Second, use global to search for definitions and references.
*** Ftrace

Manipulate via pseudo-filesystem in /sys/kernel/debug/tracing

Or use trace-cmd

**** Get a list of traceable functions

    # trace-cmd list -f

**** Time a specific function

  # trace-cmd record -p function_graph -l <function-name>

The trace will be saved in 'trace.dat'. Display it with

# trace-cmd record trace.dat

*** gdbgui
https://www.gdbgui.com/

*** ThreadSanitizer
https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual

each 64-bit word of the application has N corresponding *shadow words* each 64-bit in length.
A shadow word represents a memory access to a single location.
N words that map to the same location is called a shadow state.

ThreadSanitizer uses events to detect data races.
Events include:
 - locking
 - unlocking
 - condition variable signal
 - condition variable wait
 - read
 - write

To determine the order of reads and write performed in different threads,
tsan uses locking and condition variable events to infer relationships.

**** Problem with std::mutex
Since the standard library is not compiled with tsan, there is no instrumentation performed on
mutual exclusion functions in the standard library.


* Programming Languages
** QT
*** Layouts
**** Set Layout in central widget of layout.
Special case. Do this:

  QWidget *widget = new QWidget();
  widget->setLayout(VBoxLayout);
  setCentralWidget(widget);

*** QT Designer
Graphical design -> ui description file (xml) -> generated source code

**** Layouts
A bit finicky.

A widget cannot be move to another layout if its already in one.
This causes problems.
**** Splitters
How to rearrange objects within these?
**** Custom Widgets
Use placeholders + promotion, or plugins.
Don't know how this works, might be easier to use hand coding instead.

** C++
*** consexptr
**** constexpr values
May be any literal type:
- floating point literal
- character literal..
- literal objects.
Use anywhere literals may be used.

literal objects:
created by constexpr constructor 

**** constexpr computaions
- Free functions
- Member functions
- Constructors
Can run at both compile time and runtime.

not part of overload resolution.

Requirements:
C++11 says what you can do
C++14 says what you can't do

- no new
- not virtual
- returns literal type or reference to literal type.
- parametrs literal type or reference to literal type.
- etc.

constexpr Constructor 
- constructor body may be used (C++14)
- non-static members and base class must be init-ed
- all invoked ctors must be constexpr
- all assignments in initializer list constant expression.


*** delete constructor

https://stackoverflow.com/questions/14085620/why-do-c11-deleted-functions-participate-in-overload-resolution

the purpose of 'myConstructor(args...)= delete' is to say
*forbid* use of this constructor. It does *not* mean remove
this constructor.

So the deleted constructor will be part of the overload resolution
in order for the compiler to detect if the deleted constructor is
wrongly used. 

*** overload resolution


https://stackoverflow.com/questions/25862821/how-does-overload-resolution-work-in-the-context-of-private-modifier

access specifiers are checked last by the compiler.
This means that a function call may be ambiguous even though only one function is public.

** POSIX Shell
http://www.etalabs.net/sh_tricks.html

*** Pass on arguments to script

Use "$@", NOT $*, NOT $@ etc..
See the following example:

# cat ./test.sh
#!/usr/bin/env bash
echo "================================="

echo "Quoted DOLLAR-AT"
for ARG in "$@"; do
    echo $ARG
done

echo "================================="

echo "NOT Quoted DOLLAR-AT"
for ARG in $@; do
    echo $ARG
done

echo "================================="

echo "Quoted DOLLAR-STAR"
for ARG in "$*"; do
    echo $ARG
done

echo "================================="

echo "NOT Quoted DOLLAR-STAR"
for ARG in $*; do
    echo $ARG
done

echo "================================="
Now, run the test script with various arguments:
# ./test.sh  "arg with space one" "arg2" arg3
=================================
Quoted DOLLAR-AT
arg with space one
arg2
arg3
=================================
NOT Quoted DOLLAR-AT
arg
with
space
one
arg2
arg3
=================================
Quoted DOLLAR-STAR
arg with space one arg2 arg3
=================================
NOT Quoted DOLLAR-STAR
arg
with
space
one
arg2
arg3
=================================

*** Get path to executed script
    dir=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)

DOES NOT WORK IF SCRIPT WAS CALLED VIA SYMLINK.
If readlink is available use this:

    spath=`readlink -f "$0"`
    sdir=`dirname -- "$spath"`


*** Difference between $@ and $*

* Programming Techniques
** Endian conversion to/from a know format 
Utilize the fact that the left shift, shifts towards most significant bit,
and right shift shifts towards least significant bit (this applies to multiple languages).

Example:

destination is LE
  uint16 source_val = 0x1234;
  dest_buf[0] = 0xFF & source_val;
  dest_buf[1] = 0xFF & (source_val >> 8);

Works for both BE and LE host.

** Serialization
*** capnproto
https://capnproto.org/
"think JSON, except binary"
*** msgpack
https://msgpack.org/index.html
Binary serialization.
*** rapid json
http://rapidjson.org/
https://github.com/Tencent/rapidjson
A fast JSON parser/generator for C++ with both SAX/DOM style API
   
** Error handling for ECUs (Adaptive Autosar)
According to legal requirements (ISO 26262)
The only error conditions ECU sw can face are related to information exchange
HW errors (eg. broken cables, bad voltage, RAM problems) out of scope.


From Autosar
| Error      | What                                             | Response                               |                 |
|------------+--------------------------------------------------+----------------------------------------+-----------------|
| Error      | request not fulfilled, but execution can proceed | return error code                      | Recoverable     |
| Corruption | runtime failure (eg out-of-memory)               | exit (unsuccessful normal termination) | non-recoverable |
| Violation  | equivalent to assertion                          | abort(abnormal termination)            | non-recoverable |

*** Error
Use ara::core::Result
(instead of exceptions)

*** Corruption
Not related to code defects
eg. out-of-memory, config broken.

The safest option is unnsuccessful termination

Failure handler may restart program depending on context.

Handle like a recoverable error as long as safely possible.

main -> foo -> bar
     <-     <-    (error detection)
(marked
as corruption)

For out-of-memory it might be unsafe to propagate, destructor may use more memory.
Better to terminate directly.

*** Violation
Failed assertion, precondition or postcondition not met for function.
Stems from code defect; the caller has broken the contract with the callee.
Not sensible to propagate error, since the caller has an error.
-> therefore abort process
**** Contracts
- Prefer conditions that can be checked at compile-time (eg. strongly typed parameters).
- preconditions should be under exclusive control of the running process.
  -> Bad: 3d party can effect precondition after a call is made.
  -> for multithreading:
      use synchronization for keeping contracts/invariants.
      However, this may be difficult.
      But error in synchronization is error in code and should be handled as violations.

***** Anti-pattern: returning an error in response to violation
Guidelines state that return value must be handled, and cases must be tested.
But the cases cannot be reached, so a mock would be required, which would lead to unnesescary code.
***** Anti-pattern: expect a second guess to heal a violation
Not realistic for an ECU.
***** Anti-pattern: Opting out woith a Void cast.
This masks errors if new errors are added.

** Testing
*** Mock Objects
A mock object m, has the same interface as an object o, and m can be used to inspect interactions from a user of an o object.
*** Fake Objects
Objects that mimic real ones.

* Misc Tools
** org-mode
** organice
** recutils


* Courses

** eth zurich computer architecture fall 2019
https://safari.ethz.ch/architecture/fall2019/doku.php?id=schedule

* Reverse Engineering
https://beginners.re/RE4B-EN.pdf

* Virtualization
** x86 Virualization
*** VMware Player
**** Problem with Copy paste
(re)install VMware tools.
shutdown the virtual machine
in player->manage->Virtual Machine Settings->Options->shared folders
choose "Always Enabled"

Also, depending on the system configuration, the vmware tools daemon might not be started correctly.
In that case run the command:

    $ vmware-user

**** VMware tools
https://kb.vmware.com/s/article/1022525
https://kb.vmware.com/s/article/1035392
Install vmware tools:
1. player
2. manage
3. (re)install vmware tools

This will cause a cd to be added to the virtual drive of the virtual machine.
Mount it and extract the archive VMwareTools-<version>.
In the extracted folder, run:

    # ./vmware-install.pl -d

The flag -d will choose default settings.
** OS-level virtualization (Containers)
*** Systemd-nspawn
**** Systemd-Nspawn is Chroot on Steroids 
https://www.youtube.com/watch?time_continue=501&v=s7LlUs5D9p4&feature=emb_logo

***** For building, testing, profiling.
Not For shipping.
Therefore, not a competitor with docker, lxc, etc.; it lacks features that these have.
Originally made for testing systemd.

***** Creating linux nspawn containers:
1. use package manager to install base distro packages to a specific directory
   -eg yum, for fedora, debboostrap for ubuntu/debian.
2. run systemd-nspawn using the packages you just downloaded. 


***** Machinectl - Machined
dbus service that monitors nspawn, lxc, etc. and passes on info to ps and other tools

***** Journalctl -m
used to view containers

*** Containers with systemd - Lennart Poettering
https://www.youtube.com/watch?v=d4SwL2t5Yh4
**** Guest OS similar to Host OS
Stricter requirement compared to docker.
**** "integrated isolation"
**** Minimal
Sacrifice features in favour of simplicity.
* Keyboards

** Leopold FC660M

DIP Switch
Key/Function
SW OFF
SW ON
SW1
Ctrl (left)
Ctrl (left)
Caps Lock
SW1
Caps Lock
Caps Lock
Ctrl (left)
SW2
Windows
Windows
Alt (left)
SW2
Alt (left)
Alt (left)
Windows
SW3
Windows
Windows
Fn
SW3
Fn
Fn
Windows
SW4
Windows
Enabled
Disabled
FN Layer

Key Combination
Function
Fn + Q
Toggle default action for Esc key
between Esc and Backtick
Toggle Insert LED On/Off
to indicate state this change
Fn + Number Row
F1-F12
Fn + Arrow Up
Page Up
Fn + Arrow Down
Page Down
Fn + Arrow Left
Home
Fn + Arrow Right
End
Fn + Ctrl (right)
Menu
Fn + I
Print Screen/System Request
Fn + O
Scroll Lock
Fn + P
Pause/Break
Fn + K
Home
Fn + L
Page Up
Fn + <
End
Fn + >
Page Down
Shift + Esc
~
Fn + Esc
* Misc Programs
** Burning
*** K3B
** Other
*** Sweet Home 3D
http://www.sweethome3d.com/

* Books
** Quantum Computing
http://mmrc.amss.cas.cn/tlb/201702/W020170224608149940643.pdf
* CAD
** OpenScad
https://github.com/runsun/OpenSCAD_Tips

* Programming Tools
** Git
*** Submodules

The file .gitmodules keeps track of modules.
.git also keeps track of the commit to use for every submodule.

   $ git pull

does not update submodules.
In addition, use:

    $ git submodule update --init --recursive

**** Questions: 
why does pull not update submodules?
Does push also push the currently checked out version of the submodules?
** Build Systems
*** Meson
https://www.youtube.com/watch?v=SCZLnopmYBM

Declarative: descrive *what* you want not *how*.

Supported IDEs:
- gnomebuilder
- eclipse

written in Python

Built-in support for:
- parallel unit tests
- coverege report
- different build targets

Rebuild shared libraries without relinking

** Gerrit
Keeps track of changes via change ids.
They are generated as a commit hook and included in the commit message.
successive commits with the same change-ids will appear in gerrit as successive patch sets.

*** Comments
**** -2
must not be merged.
Will remain when new patch sets are pushed.
**** -1
suspicious but may be merged
Will be removed if a new patch set is pushed.
**** +1
Looks good.
+1 does not stack; two +1 does not equal +2.
**** +2
Approve for merge.

** Google Test

** Google Mock

A mock call specification has the syntax:

EXPECT_CALL(mock_object, method(matchers))
    .Times(cardinality)
    .WillOnce(action)
    .WillRepeatedly(action);

matchers filters the specification

Times, WillOnce, WillRepeatedly are the requirements for this specification.
** Gitlab
*** Merge Train
Is a mechanism to handle concurrent merge requests.
Consider merge requests A and B, where A will cause B to fail tests if merged before.
If the A merge starts, and shortly after B merge starts, then master will end up in a failed state.

When using merge trains, pipeline (which include tests) jobs will be run on each MR and if they fail the MR will not be merged.
Also, when the A merge starts a merge train will be created.
When the B merge starts it will be added to the merge train.
This means that it will do a merge between A and master on a new branch.
Merge B on that point, and run a pipeline.
When the pipeline fails, B will not be merged, and thus the master will not be in a broken state.
In addition the method of merging the previous MR and applying the changes on top, means that pipelines can be run in parallel.
  
* Compilers
** GCC
*** Show defined macros
$ gcc -xc -E -dM - </dev/null
$ gcc -xc++ -E -dM - </dev/null
för C respektive C++.


* Embedded ARM
** Libraries
*** Newlib
https://sourceware.org/newlib/
C library for embedded systems.
*** MBED

Mbed OS is an open-source operating system for platforms using Arm microcontrollers designed specifically for Internet of Things (IoT) devices

Mbed OS provides an abstraction layer for the microcontrollers it runs on,
so that developers can focus on writing C/C++ applications that call functionality available on a range of hardware.
Mbed OS applications can be reused on any Mbed-compatible platform.

** Toolchains
*** GNU Arm Embedded Toolchain
Open Source toolchain for Arm Cortex-M and Cortex-R.
Uses GCC and newlib.
"arm-none-eabi"

Linux, Mac, and source packages, readme.txt is in the share/doc/gcc-arm-none-eabi

This toolchain is released with two prebuilt C libraries based on newlib:
one is the standard newlib and the other is newlib-nano for code size.
To distinguish them, we rename the size optimized libraries as:

  libc.a --> libc_nano.a
  libg.a --> libg_nano.a


** ARM ISA
ISA for ARM processors.
Uses both 32-bit wide instructions.

** Thumb ISA
ISA for ARM processors.
Uses both 16-bit and 32-bit wide instructions.

** Cortex M3
*** Memory model
Fixed memory map with 4 GB of adderssable memory.
** CMCIS
    
Cortex Microcontroller Software Interface Standard
Vendor independent*
https://arm-software.github.io/CMSIS_5/

*** Core (Cortex-M)
Arm provides template files, complete source files for concrete devices
 are provided by vendor. Device family pack (DFP).

*** Pack 
    DFP
    Vendor provides device family specific packs based on arm CMCSIS templates.
Meant to be used by supported IDE.
**** Keil.STM32F1xx_DFP.2.3.0
Includes STM32F10x Standard Peripherals Library Drivers (StdPeriph_Driver)
****  RTE_Components.h
 "The build environment should generate a C/C++ include file with the name RTE_Components.h"
 Contains macros to define current device and other things.
 
*** Linking?

*** TODO License

DFP

https://developer.arm.com/embedded/cmsis/cmsis-packs/devices/STMicroelectronics/STM32F103C8

“Middleware” means all of the following software components; (a) RL-TCPnet (networking suite) in object code form;
(b) RL-USB (USB host and device) in object code form; (c) RL-CAN (CAN interface) in source code form;
(d) RL-Flash (flash file system) in object code form;
and (e) GUI emWin in object code form for ARM7, ARM9, Cortex-M series, and Cortex-R4 processor-based devices only.

Middleware: YOU ACKNOWLEDGE AND AGREE THAT YOU SHALL NOT USE MIDDLEWARE UNLESS YOU HAVE LICENSED MDK-ARM PROFESSIONAL EDITION

LIBRARIES:
(b) incorporate and link the helper libraries into, or use them in, Software Applications;
(c) reproduce and distribute the Target Libraries, only in object code form, and only as part of Software Applications.

** Synchronization
*** Linked load/store
Available for cortex-M (and others)
ISA synchronization mechanism.

There is hardware support for monitoring accesses to shared memory.
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dht0008a/CJAGCFAF.html
For a single processor there is a local monitor.
For multiple processors accessing the same memory there is a global monitor.
A state machine per memory address is used to detect concurrent accesses.

http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dht0008a/ch01s02s01.html
LDREX loads from an address into a register and markes that address as exclusive.
STREX tries to store the register contents to an address, and saves what happened, whether it succeded or not, in another register.
If that address was marked as exclusive by this processor,
and a store happened to this register (by this processor? or only other processors?) after the corresponding LDREX,
but before this STREX, this operation will not succeed.

There is support in arm-gcc, via ARM C Language Extensions (ACLE),
but in 2.1 __ldrex and __strex has been marked deprecated, in favor of stdatomic.h in C11.
However, currently (arm-gcc-9) this is not implemented for cortex-m.
There is support when targeting linux.

*** stdatomic.h
Header file in c11.
newlib refers to gcc implementation for its function.
arm-gcc refers to DEF_SYNC_BUILTIN which must be implemented
It is not specified what DEF_SYNC_BUILTIN should do. Look at its uses to infer its semantics.

** NVIC
*** Interrupt types
Not configurable priority, probably always enabled
- reset
- NMI
- hard fault

configurable priority, can these be disabled?
- Bus fault
- User fault

configurable priority, can be disabled.
-irq

**** Disable irq interrupts
libopencm3 has __disable_interrupts which calls:

    __asm__ volatile ("CPSID I\n");

From stm PM0056:

    CPSID i  ;Disable interrupts and configurable fault handlers (set PRIMASK)




** STM
*** IDE
**** Eclipse
plugin https://gnu-mcu-eclipse.github.io/install/
Can be used with Stardard peripheral library
**** System Workbench
Built on top of Eclipse.
**** Stm32Cube

*** Peripheral Library requirements
Must be free as in beer, preferably as in freedom.
Must be allowed to distribute (possibly in object-form) inside target application.
Must be able to use it with text editor and buildsystem from cli (Make, ninja, etc).
Preferably be compatible with a bread range of devices.
*** Libraries
**** HAL
**** Standard Peripheral Library
Uses CMSIS.
Supports the following toolchains Out-of-the-box:
- arm-mdk
- ride7
- iar
- TrueSTUDIO (atollic)
  
How is startup and linking handled?
***** CMSIS License
May distribute source provided copyright notices are included.
Not allowed to assert patents agains ARM.
Not allowed to use Arm trade name...
Provided as-is...



*** flashing
**** stlink
 
Use the program stlink, or stlink-gui, available in arch linux.
Use sudo or add the following udev rule (for the st-link-v2 device)

    ACTION=="add" SUBSYSTEM=="usb", ATTR(idVendor)=="0483", 
	ATTR(idproduct)=="3744", MODE="0666", GROUP="usbusers"

**** st-flash
for my bluepill, the flash memory begins at 0x08000000 according to openocd.
Perhaps the stm-bootloader is located in the lower addresses?
Indeed, the boot jumpers affect operation:
they must be set correctly for programming/flashing respectively.

| boot0 | boot1 | mode                       |
|-------+-------+----------------------------|
|     x |     0 | Main Flash                 |
|     0 |     1 | System Flash (boot loader) |
|     1 |     1 | Embedded SRAM?             |

Is it possible to flash via stlink, with Main Flash selected?

Use the following command to flash a binary format

    st-flash write test.bin 0x08000000

**** openocd
targets
flash banks
reset halt
reset run
stm32f1x mass_erase num
flash write_bank num filename offset

target remote localhost:3333
**** gdb

***** bluepill
#daemon configuration ################################################
telnet_port 4444
gdb_port 3333

#interface configuration #############################################
source [find interface/stlink-v2.cfg]

#board configuration #################################################

source [find target/stm32f1x.cfg].cfg


*** building
**** Arduino
**** gcc

     arm-none-eabi-gcc 
***** programs
- arm-none-eabi-binutils
  - objcopy
  - objdump
- gcc-arm-none-eabi

***** stm32f103xx

      $ arm-none-eabi-gcc -g -O0 -Wall -mlittle-endian -mthumb -mcpu=cortex-m3 main.c -o main.elf

for linking need linker script.
Need to map all sections in assember:

    - .text (code)
    - .rodata (global read only)
    - .data (mutable global data)
    - vector table

The .data section is a bit special: it will be mapped into stm code area during flashing,
and later copied into the stm SRAM area during target run-time.
In gnu ld terms, VMA refers to the address in flash of .data, and LMA refers to the runtime addres of it.

***** Inspection

$ arm-none-eabi-objdump -h test_program.o

$ arm-none-eabi-objdump -h test_program.elf

$ arm-none-eabi-nm --numeric-sort test_program.elf

****** -mlittle-endian
arm is little endian
****** -mthumb
thumb instruction set, see stm programming manual

-mthumb-interwork
-mcpu=cortex-m3
-fsingle-precision-constant
-Wdouble-promotion

****** Linking
need linker script
.LD

configuration depends on cortex m3 memory model.

**** g++
     https://stackoverflow.com/questions/21527256/when-is-arm-exidx-is-used

.ARM.exidx is the section containing information for unwinding the stack.
If your C program has functions that print out a stack backtrace,
the functions will likely depend on this section being present.

Easy fix disable exceptions
*** Bootloader
where is it stored?

*** stm32f103xx
**** Peripheral clocks
APB2 peripheral clock enable register (RCC_APB2ENR)
Address: 0x18
Reset value: 0x0000 0000
Access: word, half-word and byte access
No wait states, except if the access occurs while an access to a peripheral in the APB

bit2-8 enable portA-G
portc bit4 = 0x10

RCC start 0x40021000

**** GPIO
modes:
- output push-pull, open-drain
- output pull-up, output pull-down

Peripherals won't respond correctly if their clocks haven't been enabled.
Enable all peripheral clocks before you try to do anything with the
peripherals.

After each device reset, all peripheral clocks are disabled
(except for the SRAM and FLITF).
Before using a peripheral you have to enable its clock in the RCC_AHBENR,
RCC_APB2ENR or RCC_APB1ENR register.

4 registers per port. The registers for a port are layed out next to eachother.
CRL @0x00 32-bit
CRH @0x04 32-bit
IDR @0x08 lower 16-bit
ODR @0x0C lower 16-bit
BSRR@0x10
BRR @0x14
LCKR@0x18

Port addresses is shown in datasheet memory map
| port | address     |
| A    | 0x4001 0800 |
| B    | 0x4001 0C00 |
| C    | 0x4001 1000 |
| D    | 0x4001 1400 |
| E    | 0x4001 1800 |

must be accessed as 32-bit words
***** GPIOx_CRL bits 0-7, GPIOx_CRH bits 8-15
MODE, select IN/OUT and OUT speed, 2 bit
CNF, select sub mode 2 bit
GPIOx_IDR
GPIOx_ODR

****** Example output push-pull Port A 
0b1001 - 0b1011 | 0x9-0xb for corresponding bit in CRL @0x4001 1800
0b1001 - 0b1011 | 0x9-0xb for corresponding bit in CRH @0x4001 1840
Ox0000 - 0x00FF                                    ODR @0x4001 18C0
**** Interrupts
     Controlled by NVIC on the processor core

***** EXTI
External interrupts triggered via GPIO

Interrupt EXTIx is mapped to PINx. The port to use is configured A-G.

one interrupt for all buttons, individual gpios for sensing specific button?

***** DONE Difference between interrupt request and event request?
      Events can be used to wake up from a low-power mode.
      But it seems that interrupt can be used for this purpose as well.
      However, events might be faster.

For other purposes use interrupts.
***** TODO configure interrupt registers
***** TODO configure interrupt handler
      Need to provide function pointer for the interrupt handler in the vector table.
This is done automatically by libopencm3. E.g. for exti0 you just need to provide the definition for the following function:
void exti0_isr(void)

***** bluepill pinA0 triggers when pit8 configured
**** Timers

     Different clock sources for timers may be used.

timer_set_prescaler(TIM2, ((rcc_apb1_frequency * 2) / 5000));

RM0008 page 126 figure 11 shows which clock is used for the internal clock.

***** Interrupts
Output compare flag set in status register even though it is not configured: 

If channel CC1 is configured as output:
This flag is set by hardware when the counter matches the compare value. It is cleared by
software.
0: No match.
1: The content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register.
When the contents of TIMx_CCR1 are greater than the contents of TIMx_ARR, the CC1IF
bit goes high on the counter overflow.


***** Output
set alternate function on pin for timer channel.



**** Devboard
***** Bluepill
pinmapping
PC-13 internal led


* Benchmarking
** google benchmark
** perf
** valgrind + callgrind


* Documentation
** Drawing
*** PlantUml
Generate uml diagrams from textual description.
*** Dpic
*** Yed
*** GraphML
** reStructuredText
** troff
*** tbl
